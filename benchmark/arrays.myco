# Array Performance Benchmark
# Tests array operations and data structure performance

let iterations = 10000;
let start_time = time.now().unix_timestamp();

# Test array creation and initialization
let test_array = [];
for i in range(1, iterations + 1):
    test_array.push(i);
end

# Test array access patterns
let access_sum = 0;
for i in range(0, test_array.length):
    access_sum = access_sum + test_array[i];
end

# Test array modification
for i in range(0, test_array.length):
    test_array[i] = test_array[i] * 2;
end

# Test array operations
let doubled_sum = 0;
for i in range(0, test_array.length):
    doubled_sum = doubled_sum + test_array[i];
end

# Test array slicing
let slice_sum = 0;
for i in range(0, test_array.length - 10):
    let slice = test_array.slice(i, i + 10);
    for j in range(0, slice.length):
        slice_sum = slice_sum + slice[j];
    end
end

# Test array searching
let search_count = 0;
for i in range(1, 1000):
    if test_array.contains(i * 2):
        search_count = search_count + 1;
    end
end

# Test array sorting (bubble sort)
let sort_array = [];
for i in range(1, 1000):
    sort_array.push(1000 - i);
end

# Bubble sort implementation
for i in range(0, sort_array.length - 1):
    for j in range(0, sort_array.length - i - 1):
        if sort_array[j] > sort_array[j + 1]:
            let temp = sort_array[j];
            sort_array[j] = sort_array[j + 1];
            sort_array[j + 1] = temp;
        end
    end
end

# Test multidimensional arrays
let matrix = [];
for i in range(0, 100):
    let row = [];
    for j in range(0, 100):
        row.push(i * j);
    end
    matrix.push(row);
end

let matrix_sum = 0;
for i in range(0, matrix.length):
    for j in range(0, matrix[i].length):
        matrix_sum = matrix_sum + matrix[i][j];
    end
end

let end_time = time.now().unix_timestamp();
let duration = end_time - start_time;

print("Array Benchmark Results:");
print("Array length:", test_array.length);
print("Access sum:", access_sum);
print("Doubled sum:", doubled_sum);
print("Slice sum:", slice_sum);
print("Search count:", search_count);
print("Matrix sum:", matrix_sum);
print("Duration (seconds):", duration);
print("Array operations per second:", (iterations * 3 + 1000 * 10 + 1000 + 1000000) / duration);
