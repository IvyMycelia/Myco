# Micro-benchmark: Guard Overhead
# Measures the cost of guard checks in speculative optimization

const WARMUP_ITERATIONS = 1000
const MEASUREMENT_ITERATIONS = 10000

func type_stable_function(x):
    # This function should trigger type specialization
    return x * 2 + 1
end

func type_unstable_function(x):
    # This function should trigger guard failures
    if x % 2 == 0:
        return x * 2
    else:
        return str(x) + " is odd"
    end
end

func measure_guard_overhead():
    print("=== Guard Overhead Benchmark ===")
    print("Measuring cost of guard checks in speculative optimization")
    print("")
    
    # Test type-stable function (should optimize well)
    print("Testing type-stable function:")
    start_time = time.now()
    for i in range(MEASUREMENT_ITERATIONS):
        type_stable_function(i)
    end
    end_time = time.now()
    
    stable_duration_ms = (end_time - start_time) / 1000000.0
    stable_avg_ns = (end_time - start_time) / MEASUREMENT_ITERATIONS
    
    print("  Duration: " + str(stable_duration_ms) + " ms")
    print("  Average per call: " + str(stable_avg_ns) + " ns")
    print("")
    
    # Test type-unstable function (should trigger guard failures)
    print("Testing type-unstable function:")
    start_time = time.now()
    for i in range(MEASUREMENT_ITERATIONS):
        type_unstable_function(i)
    end
    end_time = time.now()
    
    unstable_duration_ms = (end_time - start_time) / 1000000.0
    unstable_avg_ns = (end_time - start_time) / MEASUREMENT_ITERATIONS
    
    print("  Duration: " + str(unstable_duration_ms) + " ms")
    print("  Average per call: " + str(unstable_avg_ns) + " ns")
    print("")
    
    # Calculate overhead
    overhead_ns = unstable_avg_ns - stable_avg_ns
    overhead_percent = (overhead_ns / stable_avg_ns) * 100.0
    
    print("Guard overhead: " + str(overhead_ns) + " ns (" + str(overhead_percent) + "%)")
    print("")
    
    return overhead_ns
end

measure_guard_overhead()
