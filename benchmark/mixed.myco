# Mixed Workload Performance Benchmark
# Tests real-world mixed operations combining all features

let iterations = 5000;
let start_time = time.now().unix_timestamp();

# Simulate a simple data processing pipeline
class DataProcessor:
    let data: Array
    let results: Array
    
    func initialize():
        self.data = [];
        self.results = [];
    end
    
    func load_data(count):
        for i in range(1, count + 1):
            let record = {};
            record.id = i;
            record.value = (i * 1.5).sin() * 100;
            record.category = if i % 3 == 0: "A"; else if i % 3 == 1: "B"; else: "C"; end
            record.timestamp = time.now().unix_timestamp() + i;
            self.data.push(record);
        end
    end
    
    func process_data():
        for i in range(0, self.data.length):
            let record = self.data[i];
            let processed = {};
            processed.id = record.id;
            processed.normalized_value = record.value / 100.0;
            processed.category_score = if record.category == "A": 1.0; else if record.category == "B": 0.8; else: 0.6; end
            processed.final_score = processed.normalized_value * processed.category_score;
            processed.is_high_value = processed.final_score > 0.5;
            self.results.push(processed);
        end
    end
    
    func analyze_results():
        let high_value_count = 0;
        let total_score = 0.0;
        let category_totals = {"A": 0.0, "B": 0.0, "C": 0.0};
        
        for i in range(0, self.results.length):
            let result = self.results[i];
            if result.is_high_value:
                high_value_count = high_value_count + 1;
            end
            total_score = total_score + result.final_score;
            
            let original = self.data[i];
            category_totals[original.category] = category_totals[original.category] + result.final_score;
        end
        
        let analysis = {};
        analysis.total_records = self.results.length;
        analysis.high_value_count = high_value_count;
        analysis.average_score = total_score / self.results.length;
        analysis.category_totals = category_totals;
        
        return analysis;
    end
end

# Test mathematical computations
func mandelbrot_iterations(cx, cy, max_iter):
    let x = 0.0;
    let y = 0.0;
    let iter = 0;
    
    while x * x + y * y <= 4.0 and iter < max_iter:
        let xtemp = x * x - y * y + cx;
        y = 2.0 * x * y + cy;
        x = xtemp;
        iter = iter + 1;
    end
    
    return iter;
end

# Test string processing
func process_text(text):
    let words = text.split(" ");
    let processed = [];
    
    for i in range(0, words.length):
        let word = words[i];
        if word.length > 3:
            word = word.upper();
            processed.push(word);
        end
    end
    
    return processed.join(" ");
end

# Test file-like operations simulation
func simulate_file_operations():
    let files = [];
    for i in range(1, 100):
        let file = {};
        file.name = "file" + i.toString() + ".txt";
        file.size = i * 1024;
        file.content = "This is file " + i.toString() + " with " + (i * 100).toString() + " characters";
        files.push(file);
    end
    
    let total_size = 0;
    let processed_content = "";
    
    for i in range(0, files.length):
        total_size = total_size + files[i].size;
        processed_content = processed_content + process_text(files[i].content) + " ";
    end
    
    return {"total_size": total_size, "processed_content_length": processed_content.length};
end

# Test network-like operations simulation
func simulate_network_requests():
    let requests = [];
    for i in range(1, 50):
        let request = {};
        request.url = "https://api.example.com/data/" + i.toString();
        request.method = if i % 2 == 0: "GET"; else: "POST"; end
        request.payload = {"id": i, "timestamp": time.now().unix_timestamp()};
        request.timeout = 5000;
        requests.push(request);
    end
    
    let successful_requests = 0;
    let total_response_time = 0;
    
    for i in range(0, requests.length):
        # Simulate processing time
        let processing_time = (i % 10) * 10;
        total_response_time = total_response_time + processing_time;
        
        if processing_time < 50:
            successful_requests = successful_requests + 1;
        end
    end
    
    return {"successful_requests": successful_requests, "average_response_time": total_response_time / requests.length};
end

# Run the mixed workload
let processor = DataProcessor();
processor.initialize();
processor.load_data(1000);
processor.process_data();
let analysis = processor.analyze_results();

# Run mathematical computations
let mandelbrot_sum = 0;
for i in range(1, 100):
    for j in range(1, 100):
        let cx = (i - 50) / 25.0;
        let cy = (j - 50) / 25.0;
        mandelbrot_sum = mandelbrot_sum + mandelbrot_iterations(cx, cy, 50);
    end
end

# Run string processing
let test_text = "This is a test string with multiple words for processing performance testing";
let processed_text = process_text(test_text);

# Run file operations simulation
let file_ops = simulate_file_operations();

# Run network operations simulation
let network_ops = simulate_network_requests();

let end_time = time.now().unix_timestamp();
let duration = end_time - start_time;

print("Mixed Workload Benchmark Results:");
print("Data records processed:", analysis.total_records);
print("High value records:", analysis.high_value_count);
print("Average score:", analysis.average_score);
print("Mandelbrot sum:", mandelbrot_sum);
print("Processed text:", processed_text);
print("Total file size:", file_ops.total_size);
print("Processed content length:", file_ops.processed_content_length);
print("Successful requests:", network_ops.successful_requests);
print("Average response time:", network_ops.average_response_time);
print("Duration (seconds):", duration);
print("Operations per second:", (1000 * 3 + 10000 + 100 * 2 + 50) / duration);
