# Comprehensive Performance Benchmark Suite
# Tests various performance scenarios to validate optimization effectiveness

print("=== PERFORMANCE BENCHMARK SUITE ===");
print("Testing optimization performance across different workloads");
print("");

# Benchmark 1: Arithmetic Operations
print("Benchmark 1: Arithmetic Operations (10,000 iterations)");
let start_time = time.now();
let arithmetic_sum = 0;
let i = 0;
while i < 10000:
    arithmetic_sum = arithmetic_sum + (i * 2 + 1);
    i = i + 1;
end
let end_time = time.now();
let arithmetic_time = end_time - start_time;
print("Arithmetic sum: " + arithmetic_sum);
print("Arithmetic time: " + arithmetic_time + " ms");
print("");

# Benchmark 2: Function Call Overhead
print("Benchmark 2: Function Call Overhead (5,000 calls)");
func test_function(x, y, z):
    return x + y + z;
end

start_time = time.now();
let function_sum = 0;
let j = 0;
while j < 5000:
    function_sum = function_sum + test_function(j, j + 1, j + 2);
    j = j + 1;
end
end_time = time.now();
let function_time = end_time - start_time;
print("Function call sum: " + function_sum);
print("Function call time: " + function_time + " ms");
print("");

# Benchmark 3: Loop Performance
print("Benchmark 3: Loop Performance (Nested loops)");
start_time = time.now();
let loop_sum = 0;
let outer = 0;
while outer < 100:
    let inner = 0;
    while inner < 100:
        loop_sum = loop_sum + (outer * inner);
        inner = inner + 1;
    end
    outer = outer + 1;
end
end_time = time.now();
let loop_time = end_time - start_time;
print("Nested loop sum: " + loop_sum);
print("Nested loop time: " + loop_time + " ms");
print("");

# Benchmark 4: Array Operations
print("Benchmark 4: Array Operations (1,000 elements)");
# Create array with 100 elements for testing
let test_array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99];

start_time = time.now();
let array_sum = 0;
let l = 0;
while l < test_array.length:
    array_sum = array_sum + test_array[l];
    l = l + 1;
end
end_time = time.now();
let array_time = end_time - start_time;
print("Array sum: " + array_sum);
print("Array operations time: " + array_time + " ms");
print("");

# Benchmark 5: String Operations
print("Benchmark 5: String Operations (1,000 concatenations)");
start_time = time.now();
let string_result = "";
let m = 0;
while m < 1000:
    string_result = string_result + "test" + m;
    m = m + 1;
end
end_time = time.now();
let string_time = end_time - start_time;
print("String length: " + string_result.length);
print("String operations time: " + string_time + " ms");
print("");

# Benchmark 6: Recursive Functions
print("Benchmark 6: Recursive Functions (Fibonacci)");
func fibonacci(n):
    if n <= 1:
        return n;
    else:
        return fibonacci(n - 1) + fibonacci(n - 2);
    end
end

start_time = time.now();
let fib_result = fibonacci(25);
end_time = time.now();
let fib_time = end_time - start_time;
print("Fibonacci(25): " + fib_result);
print("Recursive function time: " + fib_time + " ms");
print("");

# Benchmark 7: Complex Calculations
print("Benchmark 7: Complex Calculations (Prime numbers)");
func is_prime(n):
    if n < 2:
        return false;
    end
    let i = 2;
    while i * i <= n:
        if n % i == 0:
            return false;
        end
        i = i + 1;
    end
    return true;
end

start_time = time.now();
let prime_count = 0;
let n = 2;
while n < 1000:
    if is_prime(n):
        prime_count = prime_count + 1;
    end
    n = n + 1;
end
end_time = time.now();
let prime_time = end_time - start_time;
print("Primes under 1000: " + prime_count);
print("Prime calculation time: " + prime_time + " ms");
print("");

# Benchmark 8: Mixed Workload
print("Benchmark 8: Mixed Workload (Real-world simulation)");
func process_data(data):
    let result = 0;
    let i = 0;
    while i < data.length:
        if data[i] % 2 == 0:
            result = result + data[i] * 2;
        else:
            result = result + data[i];
        end
        i = i + 1;
    end
    return result;
end

let mixed_data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49];

start_time = time.now();
let mixed_result = process_data(mixed_data);
end_time = time.now();
let mixed_time = end_time - start_time;
print("Mixed workload result: " + mixed_result);
print("Mixed workload time: " + mixed_time + " ms");
print("");

# Summary
print("=== PERFORMANCE BENCHMARK SUMMARY ===");
print("Arithmetic time: " + arithmetic_time + " ms");
print("Function call time: " + function_time + " ms");
print("Loop time: " + loop_time + " ms");
print("Array time: " + array_time + " ms");
print("String time: " + string_time + " ms");
print("Recursive time: " + fib_time + " ms");
print("Prime time: " + prime_time + " ms");
print("Mixed time: " + mixed_time + " ms");
print("");
print("Total benchmark time: " + (arithmetic_time + function_time + loop_time + array_time + string_time + fib_time + prime_time + mixed_time) + " ms");
print("=== BENCHMARK COMPLETE ===");
