# Final Bytecode Performance Benchmark

print("Starting bytecode performance benchmark...");

# Test 1: Arithmetic operations (should be 100% bytecode)
let sum = 0;
let i = 0;

print("Running arithmetic test...");
while i < 1000000:
    sum = sum + i * 2;
    i = i + 1;
end

print("Arithmetic test completed");
print("Sum: " + sum.toString());

# Test 2: Simple function calls (should be 100% bytecode)
print("Running function test...");

func simple_add(a: Int, b: Int) -> Int:
    return a + b;
end

let func_result = 0;
let j = 0;
while j < 100000:
    func_result = func_result + simple_add(j, 1);
    j = j + 1;
end

print("Function test completed");
print("Function result: " + func_result.toString());

# Test 3: Array operations (should be 100% bytecode)
print("Running array test...");
let arr = [1, 2, 3, 4, 5];
let arr_sum = 0;
let k = 0;

while k < 10000:
    arr_sum = arr_sum + arr[0] + arr[1] + arr[2] + arr[3] + arr[4];
    k = k + 1;
end

print("Array operations completed");
print("Array sum: " + arr_sum.toString());

# Test 4: Object property access (should be 100% bytecode)
print("Running object test...");

class SimpleClass:
    let value = 0;
end

let obj = SimpleClass();
let m = 0;
while m < 1000:
    obj.value = obj.value + m;
    m = m + 1;
end

print("Object test completed");
print("Object value: " + obj.value.toString());

print("Benchmark completed!");
