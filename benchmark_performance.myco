# Comprehensive Performance Benchmark
# Tests various operations to measure AST interpretation performance

print("=== Myco Lang Performance Benchmark ===");
print("Testing AST Interpretation Performance");
print("");

# Test 1: Simple Arithmetic Loop
print("Test 1: Simple Arithmetic Loop (10M iterations)");
let start_time = time.now();
let sum = 0;
let i = 0;
while i < 10000000:
    sum = sum + i;
    i = i + 1;
end
let end_time = time.now();
let arithmetic_time = end_time - start_time;
print("Arithmetic loop completed in: " + arithmetic_time.toString() + " seconds");
print("Sum: " + sum.toString());
print("Operations per second: " + (10000000 / arithmetic_time).toString());
print("");

# Test 2: Function Calls
print("Test 2: Function Calls (1M iterations)");
func add_numbers(a: Number, b: Number) -> Number:
    return a + b;
end

start_time = time.now();
let func_sum = 0;
i = 0;
while i < 1000000:
    func_sum = func_sum + add_numbers(i, i + 1);
    i = i + 1;
end
end_time = time.now();
let function_time = end_time - start_time;
print("Function calls completed in: " + function_time.toString() + " seconds");
print("Function calls per second: " + (1000000 / function_time).toString());
print("");

# Test 3: Array Operations
print("Test 3: Array Operations (100K iterations)");
let arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
start_time = time.now();
i = 0;
while i < 100000:
    arr[i % 10] = i;
    i = i + 1;
end
end_time = time.now();
let array_time = end_time - start_time;
print("Array operations completed in: " + array_time.toString() + " seconds");
print("Array operations per second: " + (100000 / array_time).toString());
print("");

# Test 4: String Operations
print("Test 4: String Operations (10K iterations)");
let str = "Hello";
start_time = time.now();
i = 0;
while i < 10000:
    str = str + " World";
    i = i + 1;
end
end_time = time.now();
let string_time = end_time - start_time;
print("String operations completed in: " + string_time.toString() + " seconds");
print("String operations per second: " + (10000 / string_time).toString());
print("");

# Test 5: Class Method Calls
print("Test 5: Class Method Calls (100K iterations)");
class TestClass:
    let value: Number
    func getValue() -> Number:
        return self.value;
    end
    func setValue(v: Number) -> Void:
        self.value = v;
    end
end

let obj = TestClass(42);
start_time = time.now();
i = 0;
while i < 100000:
    obj.setValue(i);
    let val = obj.getValue();
    i = i + 1;
end
end_time = time.now();
let class_time = end_time - start_time;
print("Class method calls completed in: " + class_time.toString() + " seconds");
print("Method calls per second: " + (200000 / class_time).toString());
print("");

# Test 6: Library Method Calls
print("Test 6: Library Method Calls (50K iterations)");
let heap = heaps.create(True);
start_time = time.now();
i = 0;
while i < 50000:
    heap = heap.insert(i);
    let size = heap.size();
    i = i + 1;
end
end_time = time.now();
let library_time = end_time - start_time;
print("Library method calls completed in: " + library_time.toString() + " seconds");
print("Library calls per second: " + (100000 / library_time).toString());
print("");

# Summary
print("=== PERFORMANCE SUMMARY ===");
print("Arithmetic operations: " + (10000000 / arithmetic_time).toString() + " ops/sec");
print("Function calls: " + (1000000 / function_time).toString() + " calls/sec");
print("Array operations: " + (100000 / array_time).toString() + " ops/sec");
print("String operations: " + (10000 / string_time).toString() + " ops/sec");
print("Class method calls: " + (200000 / class_time).toString() + " calls/sec");
print("Library method calls: " + (100000 / library_time).toString() + " calls/sec");
print("");

let total_time = arithmetic_time + function_time + array_time + string_time + class_time + library_time;
print("Total benchmark time: " + total_time.toString() + " seconds");
print("Average operations per second: " + (16100000 / total_time).toString());
print("");
print("=== BENCHMARK COMPLETED ===");
