#!/usr/bin/env myco

# Full-Featured Myco Web Server
# Demonstrates JSON.stringify, CORS, static files, and REST API

let app = server.create(3000);

# Sample data
let users = [
    {"id": "user_001", "username": "admin", "email": "admin@codesoc.com", "role": "admin", "created_at": "2024-01-01T00:00:00Z"},
    {"id": "user_002", "username": "john_doe", "email": "john@example.com", "role": "user", "created_at": "2024-01-15T10:30:00Z"}
];

let events = [
    {
        "id": "evt_001", 
        "title": "Welcome to CODESOC", 
        "description": "Join us for our first meeting", 
        "date": "2024-09-15", 
        "time": "18:00", 
        "location": "Main Hall", 
        "category": "social", 
        "status": "upcoming", 
        "max_attendees": 200, 
        "price": 0, 
        "organizer": "admin", 
        "created_at": "2024-09-01T10:00:00Z", 
        "attendees": []
    },
    {
        "id": "evt_002", 
        "title": "Compiler Workshop", 
        "description": "Learn how to build your own compiler", 
        "date": "2024-09-20", 
        "time": "14:00", 
        "location": "Lab 101", 
        "category": "workshop", 
        "status": "upcoming", 
        "max_attendees": 50, 
        "price": 25, 
        "organizer": "admin", 
        "created_at": "2024-09-01T11:00:00Z", 
        "attendees": []
    }
];

# API Routes using json.stringify
func handle_get_events():
    # Use hardcoded JSON until json.stringify segfault is fixed
    let response_json = '{"success": true, "events": [{"id": "evt_001", "title": "Welcome to CODESOC", "description": "Join us for our first meeting", "date": "2024-09-15", "time": "18:00", "location": "Main Hall", "category": "social", "status": "upcoming", "max_attendees": 200, "price": 0, "organizer": "admin", "created_at": "2024-09-01T10:00:00Z", "attendees": []}, {"id": "evt_002", "title": "Compiler Workshop", "description": "Learn how to build your own compiler", "date": "2024-09-20", "time": "14:00", "location": "Lab 101", "category": "workshop", "status": "upcoming", "max_attendees": 50, "price": 25, "organizer": "admin", "created_at": "2024-09-01T11:00:00Z", "attendees": []}], "total": 2}';
    set_response_body(response_json);
    set_response_status(200);
end;

func handle_get_event_by_id():
    # In a real app, you'd get the ID from req.param("id")
    let event_id = "evt_001";  # Placeholder
    let found_event = null;
    
    for (let i = 0; i < events.length; i = i + 1):
        if (events[i].id == event_id):
            found_event = events[i];
            break;
        end;
    end;
    
    if (found_event != null):
        # Return the first event as an example
        let response = {
            "success": true,
            "event": {
                "id": "evt_001",
                "title": "Welcome to CODESOC",
                "description": "Join us for our first meeting",
                "date": "2024-09-15",
                "time": "18:00",
                "location": "Main Hall",
                "category": "social",
                "status": "upcoming",
                "max_attendees": 200,
                "price": 0,
                "organizer": "admin",
                "created_at": "2024-09-01T10:00:00Z",
                "attendees": []
            }
        };
        set_response_body(json.stringify(response));
        set_response_status(200);
    else:
        let response = {
            "success": false,
            "message": "Event not found"
        };
        set_response_body(json.stringify(response));
        set_response_status(404);
    end;
end;

func handle_register():
    # Use hardcoded JSON until json.stringify segfault is fixed
    let response_json = '{"success": true, "message": "User registered successfully", "user": {"id": "user_123", "username": "newuser", "email": "newuser@example.com", "role": "user", "created_at": "2024-10-26T10:00:00Z"}}';
    set_response_body(response_json);
    set_response_status(201);
end;

func handle_login():
    # Use hardcoded JSON until json.stringify segfault is fixed
    let response_json = '{"success": true, "message": "Login successful", "token": "jwt_token_here", "user": {"id": "user_001", "username": "admin", "email": "admin@codesoc.com"}}';
    set_response_body(response_json);
    set_response_status(200);
end;

func handle_create_event():
    # Use hardcoded JSON until json.stringify segfault is fixed
    let response_json = '{"success": true, "message": "Event created successfully", "event": {"id": "evt_123", "title": "New Event", "description": "A newly created event", "date": "2024-12-01", "time": "19:00", "location": "Conference Room", "category": "meeting", "status": "upcoming", "max_attendees": 30, "price": 0, "organizer": "admin", "created_at": "2024-10-26T10:00:00Z", "attendees": []}}';
    set_response_body(response_json);
    set_response_status(201);
end;

func handle_register_for_event():
    # Use hardcoded JSON until json.stringify segfault is fixed
    let response_json = '{"success": true, "message": "Successfully registered for event", "event_id": "evt_001", "user_id": "user_002"}';
    set_response_body(response_json);
    set_response_status(200);
end;

# Register API routes
app.get("/api/events", handle_get_events);
app.get("/api/events/:id", handle_get_event_by_id);
app.post("/api/auth/register", handle_register);
app.post("/api/auth/login", handle_login);
app.post("/api/events", handle_create_event);
app.post("/api/events/:id/register", handle_register_for_event);

# Static file serving
app.static("/", "./");

# Start server
app.listen();

print("🚀 Full-Featured Myco Web Server Started!");
print("📡 Server running on port 3000");
print("🌐 CORS enabled for cross-origin requests");
print("");
print("🔗 Test the API:");
print("   curl http://localhost:3000/api/events");
print("   curl -X POST http://localhost:3000/api/auth/register");
print("   curl -X POST http://localhost:3000/api/events");
print("");
print("🌍 Open http://localhost:3000/ in your browser!");
print("⚡ Server will stay alive automatically (like JavaScript)");
