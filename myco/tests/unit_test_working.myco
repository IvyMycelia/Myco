# ============================================================================
# MYCO WORKING UNIT TEST SUITE
# ============================================================================

print("MYCO COMPREHENSIVE UNIT TEST SUITE");
print("========================================");

let tests_passed = 0;
let tests_total = 0;

print("\nBASIC ARITHMETIC TESTS");
print("==========================");

# Addition test
let add_result = 5 + 3;
tests_total = tests_total + 1;
if add_result == 8:
    tests_passed = tests_passed + 1;
    print("PASSED: Addition (5 + 3 = 8)");
else:
    print("FAILED: Addition");
end

# Subtraction test  
let sub_result = 10 - 4;
tests_total = tests_total + 1;
if sub_result == 6:
    tests_passed = tests_passed + 1;
    print("PASSED: Subtraction (10 - 4 = 6)");
else:
    print("FAILED: Subtraction");
end

# Multiplication test
let mul_result = 7 * 6;
tests_total = tests_total + 1;
if mul_result == 42:
    tests_passed = tests_passed + 1;
    print("PASSED: Multiplication (7 * 6 = 42)");
else:
    print("FAILED: Multiplication");
end

# Division test
let div_result = 15 / 3;
tests_total = tests_total + 1;
if div_result == 5:
    tests_passed = tests_passed + 1;
    print("PASSED: Division (15 / 3 = 5)");
else:
    print("FAILED: Division");
end

print("\nVARIABLE TESTS");
print("==================");

# Variable assignment
let number_var = 42;
tests_total = tests_total + 1;
if number_var == 42:
    tests_passed = tests_passed + 1;
    print("PASSED: Variable assignment");
else:
    print("FAILED: Variable assignment");
end

# Variable reassignment
number_var = 100;
tests_total = tests_total + 1;
if number_var == 100:
    tests_passed = tests_passed + 1;
    print("PASSED: Variable reassignment");
else:
    print("FAILED: Variable reassignment");
end

print("\nFUNCTION TESTS");
print("===================");

# Function definition and call
func add_numbers(a: int, b: int): int:
    return a + b;
end

let func_result = add_numbers(3, 7);
tests_total = tests_total + 1;
if func_result == 10:
    tests_passed = tests_passed + 1;
    print("PASSED: Function call (add_numbers(3, 7) = 10)");
else:
    print("FAILED: Function call");
end

# Recursive function test
func factorial(n: int): int:
    if n <= 1:
        return 1;
    else:
        return n * factorial(n - 1);
    end
end

let fact_result = factorial(5);
tests_total = tests_total + 1;
if fact_result == 120:
    tests_passed = tests_passed + 1;
    print("PASSED: Recursive function (factorial(5) = 120)");
else:
    print("FAILED: Recursive function");
end

print("\nCONTROL FLOW TESTS");
print("======================");

# If-else test
let condition_result = 0;
if 5 > 3:
    condition_result = 1;
else:
    condition_result = 0;
end

tests_total = tests_total + 1;
if condition_result == 1:
    tests_passed = tests_passed + 1;
    print("PASSED: If-else statement");
else:
    print("FAILED: If-else statement");
end

# For loop test
let loop_sum = 0;
for i in 1:5:
    loop_sum = loop_sum + i;
end

tests_total = tests_total + 1;
if loop_sum == 15:
    tests_passed = tests_passed + 1;
    print("PASSED: For loop (1+2+3+4+5=15)");
else:
    print("FAILED: For loop, got:", loop_sum);
end

print("\nARRAY TESTS");
print("===============");

# Array creation and length
let numbers = [1, 2, 3, 4, 5];
tests_total = tests_total + 1;
if len(numbers) == 5:
    tests_passed = tests_passed + 1;
    print("PASSED: Array creation and length");
else:
    print("FAILED: Array length");
end

print("\nADVANCED ARRAY FUNCTIONS");
print("==============================");

# Test array reduce function (sum)
let test_array = [1, 2, 3, 4, 5];
let sum_result = reduce(test_array, 0, 0);
tests_total = tests_total + 1;
if sum_result == 15:
    tests_passed = tests_passed + 1;
    print("PASSED: Array reduce - sum (1+2+3+4+5=15)");
else:
    print("FAILED: Array reduce sum, got:", sum_result);
end

print("\nOBJECT TESTS");
print("=================");

# Object creation and property access
let person = {name: "Alice", age: 30, city: "NYC"};
tests_total = tests_total + 1;
if person.name == "Alice":
    tests_passed = tests_passed + 1;
    print("PASSED: Object property access");
else:
    print("FAILED: Object property access");
end

# Nested object access
let user = {
    profile: {
        contact: {
            email: "test@example.com"
        }
    },
    name: "Bob"
};

tests_total = tests_total + 1;
if user.profile.contact.email == "test@example.com":
    tests_passed = tests_passed + 1;
    print("PASSED: Nested object property access");
else:
    print("FAILED: Nested object access");
end

print("\nERROR HANDLING TESTS");
print("=========================");

# Try-catch test
let error_caught = 0;
try:
    let bad_division = 10 / 0;
catch err:
    error_caught = 1;
end

tests_total = tests_total + 1;
if error_caught == 1:
    tests_passed = tests_passed + 1;
    print("PASSED: Try-catch error handling");
else:
    print("FAILED: Try-catch");
end

# String functions
let test_str = "Hello";
tests_total = tests_total + 1;
if len(test_str) == 5:
    tests_passed = tests_passed + 1;
    print("PASSED: String length function");
else:
    print("FAILED: String length");
end

print("\nFINAL RESULTS");
print("=================");
print("Tests Passed:", tests_passed);
print("Total Tests:", tests_total);

if tests_passed == tests_total:
    print("ALL TESTS PASSED! Myco is working perfectly!");
    print("Ready for production use");
else:
    let failed = tests_total - tests_passed;
    print("TESTS FAILED:", failed);
    print("Fix issues before committing");
end

let success_rate = (tests_passed * 100) / tests_total;
print("Success Rate:", success_rate, "%");

print("\nUNIT TEST SUITE COMPLETE");
print("============================");
