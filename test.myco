# Test basic variable declarations and assignments
let x = 10;
var y = 20;
const z = 30;

# Test basic arithmetic
let sum = x + y;
let diff = x - y;
let prod = x * y;
let quot = x / y;
let mod = x % y;

# Test string operations
let str1 = "Hello";
let str2 = "World";
let concat = str1 .. str2;

# Test boolean operations
let a = true;
let b = false;
let c = a and b;
let d = a or b;
let e = not a;

# Test comparison operators
let eq = x == y;
let neq = x != y;
let lt = x < y;
let gt = x > y;
let lte = x <= y;
let gte = x >= y;

# Test if-else statements
if x > y:
    print("x is greater");
elseif x < y:
    print("y is greater");
else:
    print("x and y are equal");
end

# Test while loop
let i = 0;
while i < 5:
    print(i);
    i = i + 1;
end

# Test for-in loop
let numbers = [1, 2, 3, 4, 5];
for num in numbers:
    print(num);
end

# Test function definition and call
func add(a, b):
    return a + b;
end

let result = add(x, y);

# Test switch statement
switch x:
case 10:
    print("x is 10");
case 20:
    print("x is 20");
default:
    print("x is something else");
end

# Test try-catch
try:
    let div = 1 / 0;
catch:
    print("Division by zero error");
end

# Test list operations
let list1 = [1, 2, 3];
let list2 = [4, 5, 6];
let combined = list1 .. list2;

# Test map operations
let map = {"key1": "value1", "key2": "value2"};
let value = map["key1"];

# Test nested blocks
if true:
    if false:
        print("This won't print");
    else:
        print("This will print");
    end
end

# Test multiple statements on one line
let p = 1; let q = 2; let r = p + q;

# Test comments and whitespace
# This is a comment
let s = 42;  # This is an end-of-line comment

# Test complex expressions
let complex = (x + y) * (z - 10) / 2;

# Test function with multiple statements
func complex_func(a, b):
    let sum = a + b;
    let prod = a * b;
    return sum + prod;
end

let final_result = complex_func(5, 3);

# Test string concatenation with print
print("The result is: " .. final_result);

# Test type annotations
let typed_var: int = 42;
let typed_str: str = "Hello";
let typed_float: float = 3.14;
let typed_bool: bool = true;

# Test function with return type
func factorial(n: int) -> int:
    if n <= 1:
        return 1;
    end
    return n * factorial(n - 1);
end

print("5! = " .. factorial(5));

func greet(name = "stranger"):
    print("Hello, " .. name)
end
greet()
greet("Ivy")

let square = func(x): return x * x end
print(square(4))

func outer():
    func inner():
        print("Inside inner")
    end
    inner()
end
outer()

let nums = [1, 2, 3]
nums[1] = 99
print(nums)

map["key2"] = "newValue"
print(map)

let x = "outer"
func scope_test():
    let x = "inner"
    print(x)
end
scope_test()
print(x)

let n = 10
let s = tostring(n)
let i = tonumber("123")

let maybe = null
if maybe == null:
    print("It's null")
end

let result = (x > y) ? "X" : "Y"  # If supported

let poem = """
Roses are red,
Myco is clean,
Code like a witch,
And debug like a queen.
"""
print(poem)
