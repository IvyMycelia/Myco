=== Myco Comprehensive Test Suite ===
Testing EVERY feature and edge case in Myco

=== 1. BASIC DATA TYPES ===
1.1. Numbers...
âœ“ Integer variable: 42
âœ“ Float variable: 3.140000
âœ“ Negative integer: -10
âœ“ Negative float: -3.140000
âœ“ Zero: 0

1.2. Strings...
âœ“ String variable: Myco
âœ“ Empty string: ''
âœ“ String with spaces: hello world

1.3. Booleans...
âœ“ Boolean True: True
âœ“ Boolean False: False

1.4. Null...
âœ“ Null variable: Null

=== 2. ARITHMETIC OPERATIONS ===
2.1. Addition...
âœ“ Integer addition (5 + 3): 8
âœ“ Float addition (2.5 + 1.5): 4
âœ“ Mixed addition (5 + 2.5): 7.500000
âœ“ String concatenation: helloworld

2.2. Subtraction...
âœ“ Integer subtraction (10 - 4): 6
âœ“ Float subtraction (5.5 - 2.5): 3
âœ“ Negative result (3 - 5): -2

2.3. Multiplication...
âœ“ Integer multiplication (6 * 7): 42
âœ“ Float multiplication (2.5 * 4): 10
âœ“ Zero multiplication (5 * 0): 0

2.4. Division...
âœ“ Integer division (15 / 3): 5
âœ“ Float division (10.0 / 2.5): 4
âœ“ Division with remainder (7 / 2): 3.500000

=== 3. COMPARISON OPERATIONS ===
3.1. Equality...
âœ“ Integer equality (5 == 5): True
âœ“ Integer inequality (5 == 6): False
âœ“ Float equality (3.14 == 3.14): True
âœ“ String equality ('hello' == 'hello'): True
âœ“ Boolean equality (True == True): True

3.2. Inequality...
âœ“ Integer inequality (4 != 6): True
âœ“ String inequality ('hello' != 'world'): True

3.3. Greater than...
âœ“ Greater than (10 > 5): True
âœ“ Not greater than (5 > 10): False

3.4. Less than...
âœ“ Less than (3 < 7): True
âœ“ Not less than (7 < 3): False

3.5. Greater than or equal...
âœ“ Greater than or equal (10 >= 5): True
âœ“ Equal values (5 >= 5): True

3.6. Less than or equal...
âœ“ Less than or equal (3 <= 7): True
âœ“ Equal values (5 <= 5): True

=== 4. LOGICAL OPERATIONS ===
4.1. Logical AND...
âœ“ Logical AND (True and True): True
âœ“ Logical AND false (True and False): False

4.2. Logical OR...
âœ“ Logical OR (False or True): True
âœ“ Logical OR false (False or False): False

4.3. Logical NOT...
âœ“ Logical NOT (not False): True
âœ“ Logical NOT false (not True): False

4.4. Complex logical expressions...
âœ“ Complex logical ((True and False) or True): True
âœ“ Nested NOT (not (True and False)): True

5. Arrays...
âœ“ Simple array: [1, 2, 3]
âœ“ Nested array: [[1, 2], [3, 4]]
âœ“ Mixed type array: [1, hello, True, [1, 2]]
âœ“ Empty array: []

6. String Operations...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

=== 7. STRING OPERATIONS ===
7.1. String concatenation...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

7.2. Escape sequences...
âœ“ Escape sequences work
âœ“ Quoted string: He said "Hello"
âœ“ Backslash string: Path: C:\Users\Name

8. Control Flow...
âœ“ If statement works
âœ“ Else statement works
âœ“ Else-if statement works

9. Built-in Libraries...
âœ“ Math library imported
âœ“ String type available
âœ“ Array type available
âœ“ File library imported
âœ“ Directory library imported
âœ“ Maps library available
âœ“ Sets type available
âœ“ Trees library imported
âœ“ Graphs library imported

10. Math Library Functions...
âœ“ Math.Pi: 3.141593
âœ“ Math.E: 2.718282
âœ“ Math.abs(-5): 5
âœ“ Math.min(10, 5): 5
âœ“ Math.max(10, 5): 10
âœ“ Math.sqrt(16): 4

11. String Library Functions...
âœ“ String.upper('hello world'): HELLO WORLD
âœ“ String.lower('HELLO WORLD'): hello world
âœ“ String.trim('  hello  '): 'hello'
âœ“ len('hello'): 5

12. Input Function...
âœ“ Input function available (tested manually)

13. Array Library Functions...
âœ“ Array library imported successfully

13.1. Enhanced Array Operations...
âœ“ array.join() successful
âœ“ array.contains() with existing value
âœ“ array.contains() with missing value
âœ“ array.indexOf() with existing value
âœ“ array.indexOf() with missing value
âœ“ array.unique() successful
âœ“ array.concat() successful
âœ“ array.slice() successful
âœ“ array.fill() successful

14. File Library Functions...
âœ“ File write successful
âœ“ File exists check successful
âœ“ File read successful
âœ“ File delete successful

15. Directory Library Functions...
âœ“ Current directory successful
âœ“ Directory listing successful
âœ“ Directory creation successful
âœ“ Directory exists check successful

16. Maps Library Functions...
âœ“ maps.has() with existing key
âœ“ maps.has() with missing key
âœ“ maps.size returns correct count
âœ“ maps.keys successful
âœ“ maps.delete() executed
âœ“ maps.update() executed
âœ“ maps.clear() executed

17. Sets Library Functions...
âœ“ set.has() with existing element
âœ“ set.has() with missing element
âœ“ set.size returns correct count
âœ“ set.add() executed
âœ“ set.remove() executed
âœ“ set.toArray() successful
âœ“ set.union() successful
âœ“ set.intersection() successful
âœ“ set.clear() successful

18. Trees Library Functions...
âœ“ trees.create() successful
âœ“ trees.size returns correct initial size
âœ“ trees.isEmpty() returns correct initial state
âœ“ trees.insert() successful
âœ“ trees.search() successful
âœ“ trees.clear() successful

19. Graphs Library Functions...
âœ“ graphs.create() successful
âœ“ graphs.size returns correct initial size
âœ“ graphs.isEmpty() returns correct initial state
âœ“ graphs.add_node() successful
âœ“ graphs.add_edge() successful
âœ“ graphs.clear() successful
âœ“ graphs.create() with directed parameter successful

20. Heaps Library Functions...
âœ“ heaps.create() successful
âœ“ heaps.size successful
DEBUG: builtin_heap_isEmpty_method called with 0 arguments
DEBUG: self = 0x0, self->type = -1
[35m[CRITICAL][0m E5001 [unknown::unknown_function]:1339:18: heap.isEmpty() can only be called on heap objects
âœ— heaps.isEmpty() failed
[35m[CRITICAL][0m E5001 [unknown::unknown_function]:1349:13: heap.insert() can only be called on heap objects
[35m[CRITICAL] E9008 [35mMethod not found[0m in pass.myco:1350:13
  [35mHint:[0m Report as bug
