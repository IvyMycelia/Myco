Type checking errors:
  Type error at line 0, column 0: Type mismatch in assignment
Warning: Parse errors detected
=== Myco Comprehensive Test Suite ===
Testing EVERY feature and edge case in Myco

=== 1. BASIC DATA TYPES ===
1.1. Numbers...
âœ“ Integer variable: 42
âœ“ Float variable: 3.140000
âœ“ Negative integer: -10
âœ“ Negative float: -3.140000
âœ“ Zero: 0

1.2. Strings...
âœ“ String variable: Myco
âœ“ Empty string: ''
âœ“ String with spaces: hello world

1.3. Booleans...
âœ“ Boolean True: True
âœ“ Boolean False: False

1.4. Null...
âœ“ Null variable: Null

=== 2. ARITHMETIC OPERATIONS ===
2.1. Addition...
âœ“ Integer addition (5 + 3): 8
âœ“ Float addition (2.5 + 1.5): 4
âœ“ Mixed addition (5 + 2.5): 7.500000
âœ“ String concatenation: helloworld

2.2. Subtraction...
âœ“ Integer subtraction (10 - 4): 6
âœ“ Float subtraction (5.5 - 2.5): 3
âœ“ Negative result (3 - 5): -2

2.3. Multiplication...
âœ“ Integer multiplication (6 * 7): 42
âœ“ Float multiplication (2.5 * 4): 10
âœ“ Zero multiplication (5 * 0): 0

2.4. Division...
âœ“ Integer division (15 / 3): 5
âœ“ Float division (10.0 / 2.5): 4
âœ“ Division with remainder (7 / 2): 3.500000

=== 3. COMPARISON OPERATIONS ===
3.1. Equality...
âœ“ Integer equality (5 == 5): True
âœ“ Integer inequality (5 == 6): False
âœ“ Float equality (3.14 == 3.14): True
âœ“ String equality ('hello' == 'hello'): True
âœ“ Boolean equality (True == True): True

3.2. Inequality...
âœ“ Integer inequality (4 != 6): True
âœ“ String inequality ('hello' != 'world'): True

3.3. Greater than...
âœ“ Greater than (10 > 5): True
âœ“ Not greater than (5 > 10): False

3.4. Less than...
âœ“ Less than (3 < 7): True
âœ“ Not less than (7 < 3): False

3.5. Greater than or equal...
âœ“ Greater than or equal (10 >= 5): True
âœ“ Equal values (5 >= 5): True

3.6. Less than or equal...
âœ“ Less than or equal (3 <= 7): True
âœ“ Equal values (5 <= 5): True

=== 4. LOGICAL OPERATIONS ===
4.1. Logical AND...
âœ“ Logical AND (True and True): True
âœ“ Logical AND false (True and False): False

4.2. Logical OR...
âœ“ Logical OR (False or True): True
âœ“ Logical OR false (False or False): False

4.3. Logical NOT...
âœ“ Logical NOT (not False): True
âœ“ Logical NOT false (not True): False

4.4. Complex logical expressions...
âœ“ Complex logical ((True and False) or True): True
âœ“ Nested NOT (not (True and False)): True

5. Arrays...
âœ“ Simple array: [1, 2, 3]
âœ“ Nested array: [[1, 2], [3, 4]]
âœ“ Mixed type array: [1, hello, True, [1, 2]]
âœ“ Empty array: []

6. String Operations...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

=== 7. STRING OPERATIONS ===
7.1. String concatenation...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

7.2. Escape sequences...
âœ“ Escape sequences work
âœ“ Quoted string: He said "Hello"
âœ“ Backslash string: Path: C:\Users\Name

8. Control Flow...
âœ“ If statement works
âœ“ Else statement works
âœ“ Else-if statement works

9. Built-in Libraries...
âœ“ Math library imported
âœ“ String type available
âœ“ Array type available
âœ“ File library imported
âœ“ Directory library imported
âœ“ Maps library available
âœ“ Sets type available
âœ“ Trees library imported
[31m[ERROR][0m E3005 [dir::unknown_function]:762:20: dir.create() requires exactly 1 argument (directory path)
âœ— Graphs library import failed

10. Math Library Functions...
âœ“ Math.Pi: 3.141593
âœ“ Math.E: 2.718282
âœ“ Math.abs(-5): 5
âœ“ Math.min(10, 5): 5
âœ“ Math.max(10, 5): 10
âœ“ Math.sqrt(16): 4

11. String Library Functions...
âœ“ String.upper('hello world'): HELLO WORLD
âœ“ String.lower('HELLO WORLD'): hello world
âœ“ String.trim('  hello  '): 'hello'
âœ“ len('hello'): 5

12. Input Function...
âœ“ Input function available (tested manually)

13. Array Library Functions...
âœ“ Array library imported successfully

13.1. Enhanced Array Operations...
âœ“ array.join() successful
âœ“ array.contains() with existing value
âœ“ array.contains() with missing value
âœ“ array.indexOf() with existing value
âœ“ array.indexOf() with missing value
âœ“ array.unique() successful
âœ“ array.concat() successful
âœ“ array.slice() successful
âœ“ array.fill() successful

14. File Library Functions...
âœ“ File write successful
âœ“ File exists check successful
âœ“ File read successful
âœ“ File delete successful

15. Directory Library Functions...
âœ“ Current directory successful
âœ“ Directory listing successful
âœ“ Directory creation successful
âœ“ Directory exists check successful

16. Maps Library Functions...
âœ“ maps.has() with existing key
âœ“ maps.has() with missing key
âœ“ maps.size() returns correct count
âœ“ maps.keys() successful
âœ“ maps.delete() executed
âœ“ maps.update() executed
âœ“ maps.clear() executed

17. Sets Library Functions...
âœ“ set.has() with existing element
âœ“ set.has() with missing element
âœ“ set.size() returns correct count
âœ“ set.add() executed
âœ“ set.remove() executed
âœ“ set.toArray() successful
âœ“ set.union() successful
âœ“ set.intersection() successful
âœ“ set.clear() successful

18. Trees Library Functions...
âœ“ trees.create() successful
âœ“ trees.size() returns correct initial size
âœ“ trees.isEmpty() returns correct initial state
âœ“ trees.insert() successful
âœ“ trees.search() successful
âœ“ trees.clear() successful

19. Graphs Library Functions...
[31m[ERROR][0m E3006 [dir::unknown_function]:1248:18: dir.create() argument must be a string (directory path)
âœ— graphs.create() failed
âœ— graphs.size() failed: Null
âœ— graphs.is_empty() failed
âœ— graphs.add_node() failed
âœ— graphs.add_edge() failed
âœ— graphs.clear() failed
[31m[ERROR][0m E3006 [dir::unknown_function]:1308:22: dir.create() argument must be a string (directory path)
âœ— graphs.create() with directed parameter failed

20. Heaps Library Functions...
[31m[ERROR][0m E3006 [dir::unknown_function]:1319:17: dir.create() argument must be a string (directory path)
âœ— heaps.create() failed
âœ— heaps.size() failed
âœ— heaps.isEmpty() failed
âœ— heaps.insert() failed
âœ— heaps.peek() failed
âœ— heaps.extract() failed
âœ— heaps.clear() failed

21. Queues Library Functions...
[31m[ERROR][0m E3005 [dir::unknown_function]:1395:18: dir.create() requires exactly 1 argument (directory path)
âœ— queues.create() failed
âœ— queues.size() failed
âœ— queues.isEmpty() failed
âœ— queues.enqueue() failed
âœ— queues.front() failed
âœ— queues.back() failed
âœ— queues.dequeue() failed
âœ— queues.clear() failed

22. Stacks Library Functions...
âœ“ stacks.create() successful
âœ“ stacks.size() successful
âœ“ stacks.isEmpty() successful
âœ“ stacks.push() successful
âœ“ stacks.top() successful
âœ“ stacks.pop() successful
âœ“ stacks.clear() successful

=== 23. BUILT-IN FUNCTIONS ===
20.1. Type checking...
âœ“ 42.type(): Int
âœ“ 3.14.type(): Float
âœ“ 'hello'.type(): String
âœ“ True.type(): Boolean
âœ“ Null.type(): Null
âœ“ [1,2,3].type(): [Int]

13.2. Length function...
âœ“ len('hello'): 5
âœ“ len(''): 0
âœ“ len([1,2,3]): 3

13.3. String conversion...
âœ“ toString(3.14): 3.140000
âœ“ toString(False): False
âœ“ toString(Null): Null
âœ“ toString([1,2,3]): [1, 2, 3]

=== 14. UNION TYPES ===
14.1. Basic union type declarations...
âœ“ Union type with String value: hello
âœ“ Union type with Int value: 42
14.2. Union type with multiple types...
âœ“ Union type with Bool value: True
âœ“ Union type with String value: world
14.3. Union type type checking...
âœ“ Union type type() returns correct type for String: String
âœ“ Union type type() returns correct type for Int: Int
14.4. Union type parsing and representation...
âœ“ Union type parsing with three types: parsing_test
âœ“ Union type with Float: 3.141590
14.5. Union type edge cases...
âœ“ Union type with Null: Null
âœ“ Union type with Bool: False

=== 15. OPTIONAL TYPES ===
15.1. Basic optional type declarations...
âœ“ Optional string: hello
âœ“ Optional null: Null
15.2. Optional types with different base types...
âœ“ Optional array: [1, 2, 3]
15.3. Optional type checking...
âœ“ Optional string type: String
âœ“ Optional null type: Null
15.4. Optional types with match statements...
âœ“ Match with optional string: found hello
âœ“ Match with optional null: found null
15.5. Optional union types...
âœ“ Optional union: test

=== 16. TYPE GUARDS ===
16.1. Basic type guard methods...
âœ“ isString('hello'): True
âœ“ isString(42): False
16.2. Integer type guards...
âœ“ isInt(42): True
âœ“ isInt(3.14): False
16.3. Float type guards...
âœ“ isFloat(3.14): True
âœ“ isFloat(42): False
16.4. Boolean type guards...
âœ“ isBool(True): True
âœ“ isBool(42): False
16.5. Array type guards...
âœ“ isArray([1, 2, 3]): True
âœ“ isArray('hello'): False
16.6. Null type guards...
âœ“ isNull(Null): True
âœ“ isNull('hello'): False
16.7. Number type guards...
âœ“ isNumber(42): True
âœ“ isNumber(3.14): True
âœ“ isNumber('hello'): False
16.8. Type guards with optional types...
âœ“ isString(optional_string): True
âœ“ isNull(optional_null): True
16.9. Type guards in conditional logic...
âœ“ Type guard conditional logic: string

=== 17. EDGE CASES ===
17.1. Zero and negative numbers...
âœ“ Zero addition (0 + 0): 0
âœ“ Zero multiplication (0 * 5): 0
âœ“ Negative addition (-5 + 3): -2

17.2. Large numbers...
âœ“ Large addition (999999 + 1): 1000000
âœ“ Large multiplication (1000 * 1000): 1000000

17.3. Floating point precision...
âœ“ Float precision (0.1 + 0.2 > 0.3): 0.300000
âœ“ Float equality (1.0 == 1): True

17.4. Empty values...
âœ“ Empty string length: 0
âœ“ Empty array length: 0
âœ“ Empty string concatenation: hello

=== 18. ERROR HANDLING (Expected Errors) ===
18.1. Division by zero (should continue execution)...

18.2. Array index out of bounds (should continue execution)...

18.3. Undefined variable (should continue execution)...

18.1. Function definitions (no parameters, no return type)...
âœ“ Simple function definition (no params, no return)

18.2. Function with single parameter (no return type)...
âœ“ Function with single parameter (no return type)

18.3. Function with multiple parameters (no return type)...
âœ“ Function with multiple parameters (no return type)

18.4. Function definitions (with return types)...
âœ“ Function definitions with return types

18.4. Function definitions (mixed explicit/implicit types)...
âœ“ Function definitions with mixed explicit/implicit types

18.5. Function calls (no parameters)...
âœ“ Function calls with no parameters

18.6. Function calls (with parameters)...

18.7. Function calls (with type annotations)...

18.8. Recursive functions...

18.9. Function variables and assignments...

18.10. Complex function combinations...

18.11. Function scope and closures...

18.12. Function error handling...

18.13. Lambda functions (anonymous functions)...
âœ“ Lambda functions (anonymous functions)

18.14. Function variable assignments...
âœ“ Function variable assignments

18.15. Lambda functions with different parameter types...
âœ“ Lambda functions with different parameter types

18.16. Explicit function with all types...
âœ“ Explicit function with all types

18.17. Implicit function with no types...

18.18. Mixed function - explicit parameter, implicit return...

18.19. Mixed function - implicit parameter, explicit return...

18.20. Function variable with explicit types...

18.21. Function variable with implicit types...

18.22. Function variable with mixed types...

18.23. Function variable with mixed return type...

18.24. Function type interchangeability with different argument types...
âœ“ Class with default field values
âœ“ Class instantiation
âœ“ Class with methods
âœ“ Class with self references
âœ“ Class with mixed field types
âœ“ Class with typed methods
âœ“ Class with untyped methods
âœ“ Class with complex method bodies

=== 19. INHERITANCE TESTS ===
âœ“ Basic inheritance parsing
âœ“ Field inheritance
âœ“ Method overriding
âœ“ Multi-level inheritance parsing
âœ“ Inheritance with additional fields
âœ“ Inheritance without method override
âœ“ Complex inheritance chain
âœ“ Inheritance with default values
âœ“ Multiple inheritance simulation
âœ“ Inheritance with mixed field types

=== 20. Time Library Functions ===
âœ“ Time library import works
âœ“ time.now() returns time object
âœ“ time.create() returns time object
âœ“ time.format() works correctly
âœ“ time.year() works correctly
âœ“ time.month() works correctly
âœ“ time.day() works correctly
âœ“ time.hour() works correctly
âœ“ time.minute() works correctly
âœ“ time.second() works correctly
âœ“ time.iso_string() works correctly
âœ“ time.unix_timestamp() works correctly
âœ“ time.add() works correctly
âœ“ time.subtract() works correctly
âœ“ time.difference() works correctly

=== 21. Regex Library Functions ===
âœ“ Regex library import works
âœ“ regex.match() returns match object
âœ“ regex.match() returns Null for no match
âœ“ regex.test() works for existing pattern
âœ“ regex.test() works for non-existing pattern
âœ“ regex.is_email() works for valid email
âœ“ regex.is_email() works for invalid email
âœ“ regex.is_url() works for valid URL
âœ“ regex.is_url() works for invalid URL
âœ“ regex.is_ip() works for valid IP
âœ“ regex.is_ip() works for invalid IP
âœ“ regex.CASE_INSENSITIVE flag works
âœ“ regex.GLOBAL flag works
âœ“ regex.MULTILINE flag works
âœ“ regex.DOTALL flag works
âœ“ Complex regex patterns work
âœ“ Regex with special characters works
âœ“ Multiple email format validation works
âœ“ Multiple URL format validation works
âœ“ Multiple IP format validation works
âœ“ Regex error handling works
âœ“ Regex with empty strings works

=== 22. JSON Library Functions ===
âœ“ JSON library import works
âœ“ json.stringify() works for strings
âœ“ json.stringify() works for numbers
âœ“ json.stringify() works for booleans
âœ“ json.stringify() works for null
âœ“ json.stringify() works for arrays
âœ“ json.validate() works for valid JSON
âœ“ json.validate() works for invalid JSON
âœ“ json.size() works for arrays
âœ“ json.is_empty() works for arrays
âœ“ json.parse() works

=== 23. HTTP Library Functions ===
âœ“ HTTP library import works
âœ“ http.get() works
âœ“ http.post() works
âœ“ http.put() works
âœ“ http.delete() works
âœ“ HTTP response object has all required properties
âœ“ http.status_ok() works
âœ“ http.get_header() works
âœ“ http.get_json() works
âœ“ HTTP error handling works

=== 24. ASYNC/AWAIT TESTS ===
âœ— Async function definition failed
âœ— Promise creation failed
âœ“ Await expression works

=== 25. PATTERN MATCHING TESTS ===
âœ“ Basic pattern matching works
âœ— Spore pattern matching failed
âœ“ Type pattern matching works
âœ“ Array destructuring pattern works

=== 26. GENERICS TESTS ===
âœ— Generic function with type inference failed
âœ— Generic function with string failed
âœ— Generic array processing failed
âœ— Macro definition failed
âœ— Macro expansion failed
