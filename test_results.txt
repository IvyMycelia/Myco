=== Myco Comprehensive Test Suite ===
Testing EVERY feature and edge case in Myco

=== 1. BASIC DATA TYPES ===
1.1. Numbers...
âœ“ Integer variable: 42
âœ“ Float variable: 3.140000
âœ“ Negative integer: -10
âœ“ Negative float: -3.140000
âœ“ Zero: 0

1.2. Strings...
âœ“ String variable: Myco
âœ“ Empty string: ''
âœ“ String with spaces: hello world

1.3. Booleans...
âœ“ Boolean True: True
âœ“ Boolean False: False

1.4. Null...
[31mError (LOST_IN_THE_MYCELIUM) at Line 116, Column 4: Undefined variable
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 117, Column 39: Undefined variable
[0mâœ“ Null variable: Null

=== 2. ARITHMETIC OPERATIONS ===
2.1. Addition...
âœ“ Integer addition (5 + 3): 8
âœ“ Float addition (2.5 + 1.5): 4
âœ“ Mixed addition (5 + 2.5): 7.500000
âœ“ String concatenation: helloworld

2.2. Subtraction...
âœ“ Integer subtraction (10 - 4): 6
âœ“ Float subtraction (5.5 - 2.5): 3
âœ“ Negative result (3 - 5): -2

2.3. Multiplication...
âœ“ Integer multiplication (6 * 7): 42
âœ“ Float multiplication (2.5 * 4): 10
âœ“ Zero multiplication (5 * 0): 0

2.4. Division...
âœ“ Integer division (15 / 3): 5
âœ“ Float division (10.0 / 2.5): 4
âœ“ Division with remainder (7 / 2): 3.500000

=== 3. COMPARISON OPERATIONS ===
3.1. Equality...
âœ“ Integer equality (5 == 5): True
âœ“ Integer inequality (5 == 6): False
âœ“ Float equality (3.14 == 3.14): True
âœ“ String equality ('hello' == 'hello'): True
âœ“ Boolean equality (True == True): True

3.2. Inequality...
âœ“ Integer inequality (4 != 6): True
âœ“ String inequality ('hello' != 'world'): True

3.3. Greater than...
âœ“ Greater than (10 > 5): True
âœ“ Not greater than (5 > 10): False

3.4. Less than...
âœ“ Less than (3 < 7): True
âœ“ Not less than (7 < 3): False

3.5. Greater than or equal...
âœ“ Greater than or equal (10 >= 5): True
âœ“ Equal values (5 >= 5): True

3.6. Less than or equal...
âœ“ Less than or equal (3 <= 7): True
âœ“ Equal values (5 <= 5): True

=== 4. LOGICAL OPERATIONS ===
4.1. Logical AND...
âœ“ Logical AND (True and True): True
âœ“ Logical AND false (True and False): False

4.2. Logical OR...
âœ“ Logical OR (False or True): True
âœ“ Logical OR false (False or False): False

4.3. Logical NOT...
âœ“ Logical NOT (not False): True
âœ“ Logical NOT false (not True): False

4.4. Complex logical expressions...
âœ“ Complex logical ((True and False) or True): True
âœ“ Nested NOT (not (True and False)): True

5. Arrays...
âœ“ Simple array: [1, 2, 3]
âœ“ Nested array: [[1, 2], [3, 4]]
âœ“ Mixed type array: [1, hello, True, [1, 2]]
âœ“ Empty array: []

6. String Operations...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

=== 7. STRING OPERATIONS ===
7.1. String concatenation...
âœ“ String concatenation: Hello World
âœ“ Number to string: 42
âœ“ Boolean to string: True

7.2. Escape sequences...
âœ“ Escape sequences work
âœ“ Quoted string: He said "Hello"
âœ“ Backslash string: Path: C:\Users\Name

8. Control Flow...
âœ“ If statement works
âœ“ Else statement works
âœ“ Else-if statement works

9. Built-in Libraries...
âœ“ Math library imported
âœ“ String library imported
âœ“ Array library imported

10. Math Library Functions...
âœ“ Math.Pi: 3.141593
âœ“ Math.E: 2.718282
[31mError (MYSTERY_MUSHROOM) at Line 690, Column 18: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 691, Column 34: Undefined variable
[0mâœ“ Math.abs(-5): Null
[31mError (MYSTERY_MUSHROOM) at Line 695, Column 18: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 696, Column 37: Undefined variable
[0mâœ“ Math.min(10, 5): Null
[31mError (MYSTERY_MUSHROOM) at Line 700, Column 18: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 701, Column 37: Undefined variable
[0mâœ“ Math.max(10, 5): Null
[31mError (MYSTERY_MUSHROOM) at Line 705, Column 19: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 706, Column 35: Undefined variable
[0mâœ“ Math.sqrt(16): Null

11. String Library Functions...
[31mError (MYSTERY_MUSHROOM) at Line 712, Column 17: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 713, Column 45: Undefined variable
[0mâœ“ String.upper('hello world'): Null
[31mError (MYSTERY_MUSHROOM) at Line 717, Column 17: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 718, Column 45: Undefined variable
[0mâœ“ String.lower('HELLO WORLD'): Null
[31mError (MYSTERY_MUSHROOM) at Line 722, Column 16: Method calls can only be made on objects
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 723, Column 43: Undefined variable
[0mâœ“ String.trim('  hello  '): 'Null'
âœ“ len('hello'): 5

12. Array Library Functions...
âœ“ Array library imported successfully

=== 13. BUILT-IN FUNCTIONS ===
13.1. Type checking...
âœ“ type(42): Int
âœ“ type(3.14): Float
âœ“ type('hello'): String
âœ“ type(True): Boolean
âœ“ type(Null): Null
âœ“ type([1,2,3]): Array

13.2. Length function...
âœ“ len('hello'): 5
âœ“ len(''): 0
âœ“ len([1,2,3]): 3

13.3. String conversion...
âœ“ str(3.14): 3.140000
âœ“ str(False): False
âœ“ str(Null): Null
âœ“ str([1,2,3]): [1, 2, 3]

=== 14. EDGE CASES ===
14.1. Zero and negative numbers...
âœ“ Zero addition (0 + 0): 0
âœ“ Zero multiplication (0 * 5): 0
âœ“ Negative addition (-5 + 3): -2

14.2. Large numbers...
âœ“ Large addition (999999 + 1): 1000000
âœ“ Large multiplication (1000 * 1000): 1000000

14.3. Floating point precision...
âœ“ Float precision (0.1 + 0.2 > 0.3): 0.300000
âœ“ Float equality (1.0 == 1): True

14.4. Empty values...
âœ“ Empty string length: 0
âœ“ Empty array length: 0
âœ“ Empty string concatenation: hello

=== 15. ERROR HANDLING (Expected Errors) ===
15.1. Division by zero (should continue execution)...
[31mError (SPORE_SPLIT) at Line 977, Column 25: Division by zero
[0mâœ“ Division by zero handled gracefully

15.2. Array index out of bounds (should continue execution)...
[31mError (MUSHROOM_TOO_BIG) at Line 984, Column 21: Array index out of bounds
[0mâœ“ Array out of bounds handled gracefully

15.3. Undefined variable (should continue execution)...
[31mError (LOST_IN_THE_MYCELIUM) at Line 990, Column 21: Undefined variable
[0mâœ“ Undefined variable handled gracefully

16.1. Function definitions (no parameters, no return type)...
âœ“ Simple function definition (no params, no return)

16.2. Function with single parameter (no return type)...
âœ“ Function with single parameter (no return type)

16.3. Function with multiple parameters (no return type)...
âœ“ Function with multiple parameters (no return type)

16.4. Function definitions (with return types)...
âœ“ Function definitions with return types

16.4. Function definitions (mixed explicit/implicit types)...
âœ“ Function definitions with mixed explicit/implicit types

16.5. Function calls (no parameters)...
âœ“ Function calls with no parameters

16.6. Function calls (with parameters)...
âœ“ Function calls with parameters

16.7. Function calls (with type annotations)...
âœ“ Function calls with type annotations

16.8. Recursive functions...
âœ“ Recursive functions

16.9. Function variables and assignments...
âœ“ Function variables and assignments

16.10. Complex function combinations...
âœ“ Complex function combinations

16.11. Function scope and closures...
âœ“ Function scope and closures

16.12. Function error handling...
âœ“ Function error handling

16.13. Lambda functions (anonymous functions)...
âœ“ Lambda functions (anonymous functions)

16.14. Function variable assignments...
âœ“ Function variable assignments

16.15. Lambda functions with different parameter types...
âœ“ Lambda functions with different parameter types

16.16. Explicit function with all types...
âœ“ Explicit function with all types

16.17. Implicit function with no types...
âœ“ Implicit function with no types

16.18. Mixed function - explicit parameter, implicit return...
âœ“ Mixed function - explicit parameter, implicit return

16.19. Mixed function - implicit parameter, explicit return...
âœ“ Mixed function - implicit parameter, explicit return

16.20. Function variable with explicit types...
âœ“ Function variable with explicit types

16.21. Function variable with implicit types...
âœ“ Function variable with implicit types

16.22. Function variable with mixed types...
âœ“ Function variable with mixed types

16.23. Function variable with mixed return type...
âœ“ Function variable with mixed return type

16.24. Function type interchangeability with different argument types...
[31mError (MYSTERY_MUSHROOM) at Line 1537, Column 22: Type mismatch: parameter 'param' expects Int but got String
[0m[31mError (MYSTERY_MUSHROOM) at Line 1539, Column 22: Type mismatch: parameter 'param' expects Int but got String
[0m[31mError (MYSTERY_MUSHROOM) at Line 1547, Column 20: Type mismatch: parameter 'param' expects Int but got Boolean
[0m[31mError (MYSTERY_MUSHROOM) at Line 1549, Column 20: Type mismatch: parameter 'param' expects Int but got Boolean
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 1559, Column 4: Undefined variable
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 1559, Column 58: Undefined variable
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 1561, Column 4: Undefined variable
[0m[31mError (LOST_IN_THE_MYCELIUM) at Line 1561, Column 54: Undefined variable
[0mâœ“ Function type interchangeability with different argument types
âœ“ Basic class parsing
âœ“ Class with typed fields
âœ“ Class with default field values
âœ“ Class instantiation
âœ“ Class with methods
âœ“ Class with self references
âœ“ Class with mixed field types
âœ“ Class with typed methods
âœ“ Class with untyped methods
âœ“ Class with complex method bodies

=== 17. INHERITANCE TESTS ===
âœ“ Basic inheritance parsing
âœ“ Field inheritance
âœ“ Method overriding (structure verified)
âœ“ Multi-level inheritance parsing
âœ“ Inheritance with additional fields
âœ“ Inheritance without method override
âœ“ Complex inheritance chain
âœ“ Inheritance with default values
âœ“ Multiple inheritance simulation
âœ“ Inheritance with mixed field types

=== RESULTS ===
Total: 145
Passed: 141
Failed: 4
Success rate: 97.241379%
Failed tests:
